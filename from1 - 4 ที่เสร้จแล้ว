// ปุ่ม ต่างๆ 1 - 4 ตรงละ ยังเชื่อมกับไฟล์อยู่

#include <SFML/Graphics.hpp>
#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>
#include <algorithm>

using namespace sf;
using namespace std;

// Enum for Game States
enum class GameState { From1, From2, From3, From4, From5, From6, From7 };
GameState gameState = GameState::From1;

// Store category and difficulty
string selectedCategory;
string selectedDifficulty;
vector<string> words;

// UI Button Class
class Button {
public:
    RectangleShape shape;
    Text text;

    Button(float x, float y, float width, float height, const string& buttonText, Font& font) {
        shape.setSize(Vector2f(width, height));
        shape.setPosition(x, y);
        shape.setFillColor(Color::White);
        shape.setOutlineColor(Color::Black);
        shape.setOutlineThickness(2);

        text.setFont(font);
        text.setString(buttonText);
        text.setCharacterSize(24);
        text.setFillColor(Color::Black);

        // คำนวณให้ตัวหนังสืออยู่ตรงกลาง
        FloatRect textBounds = text.getLocalBounds();
        text.setOrigin(textBounds.left + textBounds.width / 2, textBounds.top + textBounds.height / 2);
        text.setPosition(x + width / 2, y + height / 2);
    }

    void draw(RenderWindow& window) {
        window.draw(shape);
        window.draw(text);
    }

    bool isClicked(Vector2f mousePos) {
        return shape.getGlobalBounds().contains(mousePos);
    }
};

// Function to update background texture based on game state
void updateBackground(Texture& bgTexture, Sprite& background, RenderWindow& window) {
    string bgFilename;

    switch (gameState) {
    case GameState::From1: bgFilename = "background1.jpg"; break;
    case GameState::From2: bgFilename = "background2.jpg"; break;
    case GameState::From3: bgFilename = "background3.jpg"; break;
    case GameState::From4: bgFilename = "background4.jpg"; break;
    case GameState::From5: bgFilename = "background5.jpg"; break;
    case GameState::From6: bgFilename = "background6.jpg"; break;
    case GameState::From7: bgFilename = "background7.jpg"; break;
    }

    if (!bgTexture.loadFromFile(bgFilename)) {
        cerr << "Error loading background: " << bgFilename << endl;
    }
    else {
        background.setTexture(bgTexture);
        Vector2u textureSize = bgTexture.getSize();
        Vector2u windowSize = window.getSize();
        float scaleX = static_cast<float>(windowSize.x) / textureSize.x;
        float scaleY = static_cast<float>(windowSize.y) / textureSize.y;
        background.setScale(scaleX, scaleY);
    }
}

// Function to load words from file
void loadWordsFromFile() {
    words.clear();
    string filename = selectedCategory + selectedDifficulty + ".txt";
    ifstream file(filename);
    if (!file) {
        cerr << "Error loading file: " << filename << endl;
        return;
    }
    string word;
    while (getline(file, word)) {
        words.push_back(word);
    }
    file.close();
    if (!words.empty()) {
        srand(time(0));
        random_shuffle(words.begin(), words.end());
    }
}

int main() {
    RenderWindow window(VideoMode(1000, 600), "Hangman SFML");
    Font font;
    if (!font.loadFromFile("arial.ttf")) {
        cerr << "Error loading font!" << endl;
        return -1;
    }

    Texture bgTexture;
    Sprite background;
    updateBackground(bgTexture, background, window);

    Button startButton(220, 285, 240, 72, "Start", font);

    vector<Button> categoryButtons = {
        Button(230, 180, 200, 60, "Animal", font),
        Button(550, 180, 200, 60, "Things", font),
        Button(230, 300, 200, 60, "Career", font),
        Button(550, 300, 200, 60, "Country", font),
        Button(390, 420, 200, 60, "Faculty", font)
    };
    Button backButtonFrom2(50, 500, 100, 50, "Back", font);

    Button easyButton(390, 200, 220, 65, "Easy", font);
    Button hardButton(390, 340, 220, 65, "Hard", font);
    Button backButtonFrom3(50, 500, 100, 50, "Back", font);

    Button yesButton(310, 420, 100, 60, "Yes", font);
    Button noButton(580, 420, 100, 60, "No", font);

    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed)
                window.close();

            if (event.type == Event::MouseButtonPressed && event.mouseButton.button == Mouse::Left) {
                Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);
                if (gameState == GameState::From1 && startButton.isClicked(mousePos)) {
                    gameState = GameState::From2;
                    updateBackground(bgTexture, background, window);
                }
                else if (gameState == GameState::From2) {
                    for (auto& btn : categoryButtons) {
                        if (btn.isClicked(mousePos)) {
                            selectedCategory = btn.text.getString();
                            gameState = GameState::From3;
                            updateBackground(bgTexture, background, window);
                        }
                    }
                    if (backButtonFrom2.isClicked(mousePos)) {
                        gameState = GameState::From1;
                        updateBackground(bgTexture, background, window);
                    }
                }
                else if (gameState == GameState::From3) {
                    if (easyButton.isClicked(mousePos)) {
                        selectedDifficulty = "_e";
                        gameState = GameState::From4;
                        updateBackground(bgTexture, background, window);
                    }
                    else if (hardButton.isClicked(mousePos)) {
                        selectedDifficulty = "_h";
                        gameState = GameState::From4;
                        updateBackground(bgTexture, background, window);
                    }
                    if (backButtonFrom3.isClicked(mousePos)) {
                        gameState = GameState::From2;
                        updateBackground(bgTexture, background, window);
                    }
                }
                else if (gameState == GameState::From4) {
                    if (yesButton.isClicked(mousePos)) {
                        loadWordsFromFile();
                        gameState = GameState::From5;
                        updateBackground(bgTexture, background, window);
                    }
                    else if (noButton.isClicked(mousePos)) {
                        gameState = GameState::From3;
                        updateBackground(bgTexture, background, window);
                    }
                }
            }
        }

        window.clear();
        window.draw(background);
        if (gameState == GameState::From1) startButton.draw(window);
        else if (gameState == GameState::From2) {
            for (auto& btn : categoryButtons) btn.draw(window);
            backButtonFrom2.draw(window);
        }
        else if (gameState == GameState::From3) {
            easyButton.draw(window);
            hardButton.draw(window);
            backButtonFrom3.draw(window);
        }
        else if (gameState == GameState::From4) {
            yesButton.draw(window);
            noButton.draw(window);
        }
        window.display();
    }
    return 0;
}
